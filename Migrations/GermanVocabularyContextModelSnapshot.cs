// <auto-generated />
using System;
using GermanVocabularyAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GermanVocabularyAPI.Migrations
{
    [DbContext(typeof(GermanVocabularyContext))]
    partial class GermanVocabularyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GermanVocabularyAPI.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("GermanVocabularyAPI.Models.Interface.CardBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<string>("GermanWord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRemember")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TurkishMeaning")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WordType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("GermanWord")
                        .IsUnique();

                    b.ToTable("CardBases");

                    b.HasDiscriminator<string>("CardType").HasValue("Base");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GermanVocabularyAPI.Models.Adjective", b =>
                {
                    b.HasBaseType("GermanVocabularyAPI.Models.Interface.CardBase");

                    b.Property<string>("Komparativ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Superlativ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Adjective");
                });

            modelBuilder.Entity("GermanVocabularyAPI.Models.Noun", b =>
                {
                    b.HasBaseType("GermanVocabularyAPI.Models.Interface.CardBase");

                    b.Property<string>("Plural")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Noun");
                });

            modelBuilder.Entity("GermanVocabularyAPI.Models.OtherNoun", b =>
                {
                    b.HasBaseType("GermanVocabularyAPI.Models.Interface.CardBase");

                    b.HasDiscriminator().HasValue("OtherNoun");
                });

            modelBuilder.Entity("GermanVocabularyAPI.Models.Verb", b =>
                {
                    b.HasBaseType("GermanVocabularyAPI.Models.Interface.CardBase");

                    b.Property<string>("Du")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EsSieEr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ich")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ihr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Wir")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sieSie")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Verb");
                });

            modelBuilder.Entity("GermanVocabularyAPI.Models.Interface.CardBase", b =>
                {
                    b.HasOne("GermanVocabularyAPI.Models.Deck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("GermanVocabularyAPI.Models.Deck", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
